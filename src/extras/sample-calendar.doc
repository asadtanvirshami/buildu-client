// "use client"

// import * as React from "react"
// import { format, isSameDay, startOfWeek, endOfWeek, startOfMonth, endOfMonth, eachDayOfInterval, isSameMonth, set } from "date-fns"
// import { Sparkles, X, Calendar as CalendarIcon, Clock } from "lucide-react"
// import { DayPicker, CalendarDay, Modifiers } from "react-day-picker"

// // --- Shadcn UI Component Mocks ---
// import { type ClassValue, clsx } from "clsx"
// import { twMerge } from "tailwind-merge"

// function cn(...inputs: ClassValue[]) {
//     return twMerge(clsx(inputs))
// }

// const buttonVariants = (props?: { variant?: "default" | "destructive" | "outline" | "secondary" | "ghost" | "link", size?: "default" | "sm" | "lg" | "icon" }) => {
//     const { variant = "default", size = "default" } = props || {};
//     const base = "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50";
//     const variants = {
//         default: "bg-primary text-primary-foreground hover:bg-primary/90",
//         destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90",
//         outline: "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
//         secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80",
//         ghost: "hover:bg-accent hover:text-accent-foreground",
//         link: "text-primary underline-offset-4 hover:underline",
//     };
//     const sizes = {
//         default: "h-10 px-4 py-2",
//         sm: "h-9 rounded-md px-3",
//         lg: "h-11 rounded-md px-8",
//         icon: "h-10 w-10",
//     };
//     return cn(base, variants[variant], sizes[size]);
// };

// const Button = React.forwardRef<HTMLButtonElement, React.ButtonHTMLAttributes<HTMLButtonElement> & { variant?: any, size?: any }>(({ className, variant, size, ...props }, ref) => (
//     <button className={cn(buttonVariants({ variant, size }), className)} ref={ref} {...props} />
// ));
// Button.displayName = "Button";

// const DialogContent = ({ children, className }: { children: React.ReactNode, className?: string }) => (
//     <div className={cn("fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-60", className)} onClick={(e) => e.stopPropagation()}>
//         <div className="relative bg-white rounded-xl shadow-2xl w-full max-w-lg m-4 p-0">
//             {children}
//         </div>
//     </div>
// );
// const DialogHeader = ({ children, className }: { children: React.ReactNode, className?: string }) => <div className={cn("flex flex-col space-y-1.5 p-6 text-center sm:text-left", className)}>{children}</div>;
// const DialogTitle = ({ children, className }: { children: React.ReactNode, className?: string }) => <h2 className={cn("text-lg font-semibold leading-none tracking-tight", className)}>{children}</h2>;
// const DialogFooter = ({ children, className }: { children: React.ReactNode, className?: string }) => <div className={cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2 p-6 pt-0", className)}>{children}</div>;
// const DialogClose = ({ children, onClick }: { children: React.ReactNode, onClick: () => void }) => <div onClick={onClick}>{children}</div>;
// const Textarea = React.forwardRef<HTMLTextAreaElement, React.TextareaHTMLAttributes<HTMLTextAreaElement>>(({ className, ...props }, ref) => (
//     <textarea className={cn("flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50", className)} ref={ref} {...props} />
// ));
// Textarea.displayName = "Textarea"
// const Card = ({ children, className }: { children: React.ReactNode, className?: string }) => <div className={cn("rounded-lg border bg-card text-card-foreground shadow-sm", className)}>{children}</div>;
// const CardContent = ({ children, className }: { children: React.ReactNode, className?: string }) => <div className={cn("p-6 pt-0", className)}>{children}</div>;
// const Input = React.forwardRef<HTMLInputElement, React.InputHTMLAttributes<HTMLInputElement>>(({ className, ...props }, ref) => (
//     <input className={cn("flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50", className)} ref={ref} {...props} />
// ));
// Input.displayName = "Input";
// const Label = React.forwardRef<HTMLLabelElement, React.LabelHTMLAttributes<HTMLLabelElement>>(({ className, ...props }, ref) => (
//     <label ref={ref} className={cn("text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70", className)} {...props} />
// ));
// Label.displayName = "Label";


// // --- Mock Data & Types ---
// interface Task {
//     id: string;
//     name: string;
//     description: string;
//     platform: string | null;
//     location: string | null;
//     date: Date;
//     color: string;
// }

// const calendarData: Task[] = [
//     { id: "cal-uuid-1", name: "Q3 Strategy Meeting", description: "Final review of the quarterly strategy.", platform: "Google Meet", location: "Online", date: new Date("2025-06-10T10:00:00.000Z"), color: "bg-blue-500" },
//     { id: "cal-uuid-2", name: "Team Offsite Event", description: "Annual team-building offsite event.", platform: null, location: "Mountain View Retreat Center", date: new Date("2025-06-10T12:00:00.000Z"), color: "bg-green-500" },
//     { id: "cal-uuid-3", name: "Client Demo: Project Phoenix", description: "Live demonstration of the new features.", platform: "Zoom", location: "Virtual", date: new Date("2025-06-18T14:00:00.000Z"), color: "bg-purple-500" },
//     { id: "cal-uuid-4", name: "Doctor's Appointment", description: "Annual check-up.", platform: null, location: "City Clinic, Room 301", date: new Date("2025-06-18T09:30:00.000Z"), color: "bg-red-500" },
//     { id: "cal-uuid-5", name: "Dentist Appointment", description: "Regular cleaning.", platform: null, location: "Downtown Dental", date: new Date("2025-06-18T11:00:00.000Z"), color: "bg-sky-500" },
//     { id: "cal-uuid-6", name: "Project Deadline", description: "Submit the final report for Project Alpha.", platform: "Jira", location: "Online", date: new Date("2025-06-25T23:59:00.000Z"), color: "bg-amber-500" },
// ];

// const notesDataFromArtifact = [
//     { id: "note-uuid-1", note: "Initial research and competitor analysis for Project Alpha's new feature set. Focus on UI/UX trends.", tags: ["research", "competitor-analysis", "ux"], color: "#A7FFEB", createdAt: new Date("2025-06-10T11:30:00.000Z"), collection: { name: "Project Alpha" } },
//     { id: "note-uuid-2", note: "Draft of Q3 marketing content calendar. Includes blog posts, social media schedule, and email campaigns.", tags: ["content-planning", "social-media", "email"], color: "#FFCC80", createdAt: new Date("2025-06-11T09:00:00.000Z"), collection: { name: "Marketing Strategy" } },
//     { id: "note-uuid-3", note: "My personal goals for the quarter: 1. Run a 5k. 2. Read 3 books. 3. Learn the basics of React Native.", tags: ["fitness", "reading", "coding"], color: "#CF9FFF", createdAt: new Date("2025-06-01T18:00:00.000Z"), collection: { name: "Personal Goals Q3" } },
//     { id: "note-uuid-4", note: "Meeting minutes from the Project Alpha kickoff call. Key decisions and action items are summarized.", tags: ["meeting", "action-items", "kickoff"], color: "#A7FFEB", createdAt: new Date("2025-05-28T16:00:00.000Z"), collection: { name: "Project Alpha" } },
// ];

// const colorMap: { [key: string]: string } = {
//     "#A7FFEB": "bg-teal-400",
//     "#FFCC80": "bg-orange-400",
//     "#CF9FFF": "bg-purple-400",
// };

// const transformedNotes: Task[] = notesDataFromArtifact.map(note => ({
//     id: note.id,
//     name: note.note.substring(0, 40) + (note.note.length > 40 ? '...' : ''), // Keep name short
//     description: `From Note in '${note.collection.name}' | Tags: ${note.tags.join(', ')}`,
//     platform: "Notes",
//     location: null,
//     date: note.createdAt,
//     color: colorMap[note.color] || 'bg-gray-400',
// }));

// const combinedInitialData: Task[] = [...calendarData, ...transformedNotes];


// const colors = ["bg-blue-500", "bg-green-500", "bg-purple-500", "bg-red-500", "bg-sky-500", "bg-amber-500", "bg-pink-500", "bg-indigo-500"];

// // --- Reusable Components ---
// function LoadingSpinner() {
//     return (
//         <div className="flex items-center justify-center p-8">
//             <svg className="w-8 h-8 text-blue-600 animate-spin" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
//                 <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
//                 <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
//             </svg>
//         </div>
//     );
// }

// // --- Main Views ---
// function MonthView({ tasks, onTaskDrop }: { tasks: Task[], onTaskDrop: (taskId: string, date: Date) => void }) {
//     const handleDragStart = (e: React.DragEvent<HTMLDivElement>, taskId: string) => {
//         e.dataTransfer.setData("taskId", taskId);
//         e.currentTarget.style.opacity = '0.5';
//     };

//     const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {
//         e.preventDefault();
//     };

//     const handleDragEnd = (e: React.DragEvent<HTMLDivElement>) => {
//         e.currentTarget.style.opacity = '1';
//     };

//     const handleDrop = (e: React.DragEvent<HTMLDivElement>, targetDate: Date) => {
//         e.preventDefault();
//         const taskId = e.dataTransfer.getData("taskId");
//         onTaskDrop(taskId, targetDate);
//     };

//     return (
//         <DayPicker
//             showOutsideDays
//             className="w-full"
//             classNames={{
//                 months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
//                 month: "space-y-4 w-full",
//                 caption: "flex justify-center pt-1 relative items-center",
//                 caption_label: "text-lg font-bold",
//                 nav: "space-x-1 flex items-center",
//                 nav_button: cn(buttonVariants({ variant: "outline" }), "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"),
//                 table: "w-full border-collapse space-y-1",
//                 head_row: "flex",
//                 head_cell: "text-muted-foreground rounded-md w-full font-normal text-[0.8rem]",
//                 row: "flex w-full mt-2",
//                 cell: "h-24 w-full text-center text-sm p-0 relative focus-within:relative focus-within:z-20",
//                 day: cn("h-full w-full p-1 font-normal flex flex-col items-start"),
//                 day_today: "bg-accent text-accent-foreground rounded-md",
//                 day_outside: "text-muted-foreground opacity-50",
//             }}
//             components={{

//                 Day: (props: { day: CalendarDay; modifiers: Modifiers; } & React.HTMLAttributes<HTMLDivElement>
//                 ) => {

//                     const tasksForDay = tasks.filter(task => isSameDay(task.date, props.day.date.getDate())).sort((a, b) => a.date.getTime() - b.date.getTime());
//                     return (

//                         <td
//                             onDragOver={handleDragOver}
//                             onDrop={(e) => handleDrop(e, props.day.date)}

//                         >
//                             <span className="self-start">{props.day.date.getDate()}</span>
//                             <div className="mt-1 flex-grow space-y-1 overflow-hidden">
//                                 {tasksForDay.slice(0, 2).map(task => (
//                                     <div
//                                         key={task.id}
//                                         draggable
//                                         onDragStart={(e) => handleDragStart(e, task.id)}
//                                         onDragEnd={handleDragEnd}
//                                         className={cn(`w-full ${task.color} text-white text-[10px] p-1 rounded-sm truncate cursor-grab`)}
//                                     >
//                                         <span className="font-semibold">{format(task.date, "h:mma")}</span> {task.name}
//                                     </div>
//                                 ))}
//                                 {tasksForDay.length > 2 && <p className="text-[10px] text-gray-500 mt-0.5">+{tasksForDay.length - 2} more</p>}
//                             </div>
//                             {tasksForDay.length > 0 && (
//                                 <div className="absolute left-1/2 -translate-x-1/2 bottom-full mb-2 w-64 p-3 space-y-2 text-sm bg-white border rounded-lg shadow-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 z-50 pointer-events-none">
//                                     <p className="font-bold border-b pb-1 mb-1 text-gray-900">{format(props.day.date.getDate(), "EEEE, MMMM do")}</p>
//                                     <div className="space-y-2">
//                                         {tasksForDay.map(task => (
//                                             <div key={task.id} className="text-left">
//                                                 <p className="font-semibold text-gray-800">{task.name}</p>
//                                                 <p className="text-xs text-gray-600">{task.description}</p>
//                                                 <p className="text-xs text-gray-500 mt-1"></p>
//                                             </div>
//                                         ))}
//                                     </div>
//                                 </div>
//                             )}
//                         </td>
//                     );
//                 },
//             }}
//         />
//     );
// }

// function ListView({ tasks, currentMonth }: { tasks: Task[], currentMonth: Date }) {
//     const monthTasks = tasks.filter(task => isSameMonth(task.date, currentMonth)).sort((a, b) => a.date.getTime() - b.date.getTime());
//     const daysInMonth = eachDayOfInterval({ start: startOfMonth(currentMonth), end: endOfMonth(currentMonth) });

//     const tasksByDay = daysInMonth.map(day => ({
//         day,
//         tasks: monthTasks.filter(task => isSameDay(task.date, day))
//     })).filter(dayGroup => dayGroup.tasks.length > 0);

//     return (
//         <div className="p-4 space-y-6">
//             {tasksByDay.length > 0 ? tasksByDay.map(({ day, tasks }) => (
//                 <div key={day.toString()}>
//                     <h3 className="text-lg font-semibold text-gray-800 pb-2 border-b mb-4">{format(day, "EEEE, MMMM do")}</h3>
//                     <div className="space-y-4">
//                         {tasks.map(task => (
//                             <div key={task.id} className="flex items-start space-x-4">
//                                 <div className="text-sm font-semibold text-gray-600 w-20 text-right">{format(task.date, "h:mm a")}</div>
//                                 <div className="flex-1 flex items-center space-x-3 pl-4 border-l-2" style={{ borderColor: task.color.startsWith('bg-') ? task.color.substring(3, task.color.lastIndexOf('-')) : '#gray' }}>
//                                     <div className={`w-3 h-3 rounded-full ${task.color}`}></div>
//                                     <div>
//                                         <p className="font-semibold text-gray-900">{task.name}</p>
//                                         <p className="text-sm text-gray-500">{task.description}</p>
//                                         {task.location && <p className="text-xs text-gray-400 mt-1">{task.location}</p>}
//                                     </div>
//                                 </div>
//                             </div>
//                         ))}
//                     </div>
//                 </div>
//             )) : (
//                 <div className="text-center py-12">
//                     <CalendarIcon className="mx-auto h-12 w-12 text-gray-400" />
//                     <h3 className="mt-2 text-sm font-medium text-gray-900">No events</h3>
//                     <p className="mt-1 text-sm text-gray-500">There are no events scheduled for this month.</p>
//                 </div>
//             )}
//         </div>
//     )
// }

// // --- App ---
// type ModalType = 'smartTask' | 'summary' | 'error' | 'editTask';

// interface EditingTaskInfo {
//     taskId: string;
//     newDate: Date;
// }

// export default function CalendarAp() {
//     const [tasks, setTasks] = React.useState<Task[]>(combinedInitialData);
//     const [currentMonth, setCurrentMonth] = React.useState(new Date());
//     const [view, setView] = React.useState<'month' | 'list'>('month');
//     const [modalState, setModalState] = React.useState<{ isOpen: boolean; type: ModalType | null; data: any }>({ isOpen: false, type: null, data: null });
//     const [isLoading, setIsLoading] = React.useState(false);
//     const [smartTaskInput, setSmartTaskInput] = React.useState("");
//     const [editingTask, setEditingTask] = React.useState<EditingTaskInfo | null>(null);
//     const [newTime, setNewTime] = React.useState("09:00");

//     const handleOpenModal = (type: ModalType, data: any = null) => setModalState({ isOpen: true, type, data });

//     const handleCloseModal = () => {
//         setModalState({ isOpen: false, type: null, data: null });
//         setSmartTaskInput("");
//         setEditingTask(null);
//     };

//     const handleTaskDrop = (taskId: string, date: Date) => {
//         const task = tasks.find(t => t.id === taskId);
//         if (task) {
//             setNewTime(format(task.date, "HH:mm"));
//             setEditingTask({ taskId, newDate: date });
//             handleOpenModal('editTask');
//         }
//     };

//     const handleUpdateTaskTime = () => {
//         if (!editingTask || !newTime) {
//             handleOpenModal('error', { message: 'Invalid time provided. Please select a valid time.' });
//             return;
//         };
//         const [hours, minutes] = newTime.split(':').map(Number);

//         if (isNaN(hours) || isNaN(minutes)) {
//             handleOpenModal('error', { message: 'The time format is incorrect. Please use HH:mm.' });
//             return;
//         }

//         setTasks(prevTasks => prevTasks.map(task => {
//             if (task.id === editingTask.taskId) {
//                 const updatedDate = set(editingTask.newDate, { hours, minutes });
//                 return { ...task, date: updatedDate };
//             }
//             return task;
//         }));
//         handleCloseModal();
//     };


//     const handleSmartTaskSubmit = async () => {
//         if (!smartTaskInput) return;
//         setIsLoading(true);
//         const prompt = `Based on the current date of ${format(new Date(), 'MMMM do,<x_bin_992>')}, parse the following text to create a calendar event. Extract the event name, a short description, and the exact date and time. Text: "${smartTaskInput}" Return a JSON object with keys: "name", "description", and "date" (in strict ISO 8601 format).`;
//         const payload = { contents: [{ role: "user", parts: [{ text: prompt }] }], generationConfig: { responseMimeType: "application/json", responseSchema: { type: "OBJECT", properties: { name: { type: "STRING" }, description: { type: "STRING" }, date: { type: "STRING", description: "The date in ISO 8601 format, e.g., 2025-06-21T14:30:00.000Z" } }, required: ["name", "description", "date"] } } };

//         try {
//             const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) });
//             const result = await response.json();

//             if (result.candidates && result.candidates[0].content) {
//                 const taskData = JSON.parse(result.candidates[0].content.parts[0].text);
//                 const newTask: Task = { id: `cal-uuid-${Date.now()}`, name: taskData.name, description: taskData.description, date: new Date(taskData.date), color: colors[Math.floor(Math.random() * colors.length)], platform: null, location: 'To be determined' };
//                 setTasks(prev => [...prev, newTask]);
//                 handleCloseModal();
//             } else { handleOpenModal('error', { message: 'Could not generate task from your input.' }); }
//         } catch (error: any) { handleOpenModal('error', { message: `An error occurred: ${error.message}` }); }
//         finally { setIsLoading(false); }
//     };

//     const handleWeeklySummary = async () => {
//         setIsLoading(true);
//         handleOpenModal('summary');
//         const weekStart = startOfWeek(currentMonth, { weekStartsOn: 1 });
//         const weekEnd = endOfWeek(currentMonth, { weekStartsOn: 1 });
//         const weeklyTasks = tasks.filter(t => t.date >= weekStart && t.date <= weekEnd);
//         if (weeklyTasks.length === 0) {
//             setModalState({ isOpen: true, type: 'summary', data: { summary: "You have no tasks scheduled for this week." } });
//             setIsLoading(false);
//             return;
//         }
//         const taskList = weeklyTasks.map(t => `- ${t.name} on ${format(t.date, "EEEE 'at' h:mm a")}`).join("\n");
//         const prompt = `Analyze these tasks and provide a short, friendly summary for the week. Group items by day. Highlight any busy days.\n\nTasks:\n${taskList}`;
//         const payload = { contents: [{ role: "user", parts: [{ text: prompt }] }] };
//         try {
//             const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) });
//             const result = await response.json();
//             const summary = result.candidates[0].content.parts[0].text;
//             setModalState({ isOpen: true, type: 'summary', data: { summary } });
//         } catch (error: any) { handleOpenModal('error', { message: `Failed to fetch summary: ${error.message}` }); }
//         finally { setIsLoading(false); }
//     };

//     return (
//         <div className="bg-background text-foreground min-h-screen w-full">
//             <div className=" mx-auto p-4">
//                 <header className="flex flex-col sm:flex-row items-start sm:items-center justify-between mb-6 gap-4">
//                     <div className="flex items-center gap-4">
//                         <h1 className="text-3xl font-bold tracking-tight">Calendar</h1>
//                         <div className="flex items-center gap-1 p-1 bg-muted rounded-lg">
//                             <Button variant={view === 'month' ? 'secondary' : 'ghost'} size="sm" onClick={() => setView('month')}>Month</Button>
//                             <Button variant={view === 'list' ? 'secondary' : 'ghost'} size="sm" onClick={() => setView('list')}>List</Button>
//                         </div>
//                     </div>
//                     <div className="flex items-center gap-2">
//                         <Button variant="outline" onClick={handleWeeklySummary}><Sparkles className="mr-2 h-4 w-4" />Weekly Summary</Button>
//                         <Button onClick={() => handleOpenModal('smartTask')}><Sparkles className="mr-2 h-4 w-4" />Add Smart Task</Button>
//                     </div>
//                 </header>

//                 <Card>
//                     {view === 'month' ? <MonthView tasks={tasks} onTaskDrop={handleTaskDrop} /> : <ListView tasks={tasks} currentMonth={currentMonth} />}
//                 </Card>

//                 {modalState.isOpen && (
//                     <DialogContent>
//                         <DialogHeader>
//                             <DialogTitle>
//                                 {modalState.type === 'smartTask' && '✨ Add a Smart Task'}
//                                 {modalState.type === 'summary' && '✨ Weekly Summary'}
//                                 {modalState.type === 'error' && 'An Error Occurred'}
//                                 {modalState.type === 'editTask' && 'Reschedule Task'}
//                             </DialogTitle>
//                             <DialogClose onClick={handleCloseModal}>
//                                 <Button variant="ghost" size="icon" className="absolute top-4 right-4"><X className="h-4 w-4" /></Button>
//                             </DialogClose>
//                         </DialogHeader>
//                         <div className="p-6 pt-0">
//                             {isLoading ? <LoadingSpinner /> : (
//                                 <>
//                                     {modalState.type === 'smartTask' && (
//                                         <div className="space-y-4">
//                                             <p className="text-sm text-muted-foreground">Describe an event, e.g., "Lunch with the team next Tuesday at 1pm".</p>
//                                             <Textarea value={smartTaskInput} onChange={(e) => setSmartTaskInput(e.target.value)} rows={3} placeholder="Start typing..." />
//                                             <DialogFooter>
//                                                 <Button onClick={handleSmartTaskSubmit} className="w-full sm:w-auto">Create Event</Button>
//                                             </DialogFooter>
//                                         </div>
//                                     )}
//                                     {modalState.type === 'editTask' && editingTask && (
//                                         <div className="space-y-4">
//                                             <p className="text-sm text-muted-foreground">
//                                                 Set a new time for your task on <span className="font-bold">{format(editingTask.newDate, 'MMMM do,<x_bin_880>')}</span>.
//                                             </p>
//                                             <div>
//                                                 <Label htmlFor="time" className="sr-only">Time</Label>
//                                                 <div className="flex items-center gap-2">
//                                                     <Clock className="h-5 w-5 text-gray-400" />
//                                                     <Input
//                                                         id="time"
//                                                         type="time"
//                                                         value={newTime}
//                                                         onChange={(e) => setNewTime(e.target.value)}
//                                                         className="w-full"
//                                                     />
//                                                 </div>
//                                             </div>
//                                             <DialogFooter>
//                                                 <Button onClick={handleUpdateTaskTime} className="w-full sm:w-auto">Save Changes</Button>
//                                             </DialogFooter>
//                                         </div>
//                                     )}
//                                     {modalState.type === 'summary' && <p className="text-sm text-foreground whitespace-pre-wrap">{modalState.data?.summary}</p>}
//                                     {modalState.type === 'error' && <p className="text-sm text-destructive">{modalState.data?.message}</p>}
//                                 </>
//                             )}
//                         </div>
//                     </DialogContent>
//                 )}
//             </div>
//         </div>
//     );
// }
